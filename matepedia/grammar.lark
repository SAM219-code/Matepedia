?start: statement

?statement: assignment
          | func_def
          | mostrar_stmt
          | cond_stmt
          | loop_stmt
          | expr_stmt

expr_stmt: expr

assignment: CNAME "=" expr

func_def: "funcion" CNAME "(" args ")" "=" expr
args: (CNAME ("," CNAME)*)?

mostrar_stmt: "mostrar" "(" expr ")"

cond_stmt: "si" expr "entonces"
loop_stmt: "para" CNAME "en" NUMBER ".." NUMBER "hacer"

?expr: term add_sub_op_chain*
add_sub_op_chain: (PLUS | MINUS) term

?term: power mul_div_op_chain*
mul_div_op_chain: (STAR | SLASH) power

?power: atom HAT atom -> pow
       | atom

?atom: CNAME
     | NUMBER
     | func_call
     | "(" expr ")"

func_call: CNAME "(" args_expr ")"
args_expr: (expr ("," expr)*)?

%import common.CNAME
%import common.NUMBER
%import common.WS
%ignore WS

PLUS: "+"
MINUS: "-"
STAR: "*"
SLASH: "/"
HAT: "^"
LPAR: "("
RPAR: ")"